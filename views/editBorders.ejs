<!DOCTYPE html>
<html>
  <head>
    <meta name="viewpoint" content="width=device-width, initial-scale= 1">
    <title>Edit Borders for geoquiz</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

    <link rel="stylesheet" href="/ol.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="/ol.css.map" />
    <script src="/ol.js" type="text/javascript"></script>
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.3/FileSaver.min.js"></script>
    <link rel="stylesheet" href="index.css">
    <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />
    <style>
      #map {
        height: 400px;
      }
      input:focus {
        outline: none;
      }
      .map-container {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        width: 100%;
        height: 400px;
        margin-bottom: 20px;
        gap: 16px;
      }
      .map-name {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        gap: 12px;
        align-items: center;
        width: 100%;
        padding: 0;
      }
      .map-name label {
        margin: 0;
      }
      .map-name-input {
        flex: 1;
      }
  </style>
  </head>
  <body>
    <%- include ('../fixed/nav') %>
    <% var data;
       var result %>
    <div style="display: flex; flex-direction: column; align-items: center; box-sizing: border-box; justify-content: flex-start; padding: 32px 48px; width: 100%; gap: 32px;">
      <p style="width: 100%; font-size: 24px">Edit Borders for Countries</p>
      <form class="mb-3" method="GET" action="/getCountryInfo" style="width: 100%; display: flex; flex-direction: column; justify-content: flex-start; gap: 12px;">
        <div style="display: flex; flex-direction: row; justify-content: flex-start; align-items: center">
          <div style="box-sizing: border-box; padding: 16px; display: flex; flex-direction: column; justify-content: center; background-color: #EAEAEA; border-radius: 8px 0px 0px 8px; border-top: 2px solid black; border-left: 2px solid black; border-bottom: 2px solid black; border-right: 2px solid black;">
            <p>Enter Country Name: </p>
          </div>
          <input style="box-sizing: border-box; padding: 16px; flex: 1; border-top: 2px solid black; border-bottom: 2px solid black; border-right: none; border-left: none" id="countryName" name="countryName" type="text" required>
          <input class="form-control" name="option" value="borders" type="hidden">
          <div class="input-group-append">
            <input class="btn btn-info" id ="getData" type="submit" value="Search" style="box-sizing: border-box; padding: 16px; width: 100px; border-top: 2px solid #17a2b8; border-bottom: 2px solid #17a2b8; border-left: none; border-right: 2px solid #17a2b8; border-radius: 0px 8px 8px 0px">
          </div>
        </div>
        <div style="display: flex; flex-direction: row; justify-content: flex-start; align-items: flex-start; gap: 16px; width: 100%;">
          <i style="color: #17A2B8; font-size: 20px; margin-top: 6px" class="fa-solid fa-circle-info"></i>
          <p>This page is to update borders of country. Please make sure the coordinates are <span style="color: red;">valid</span> and <span style="color: red;">don't overlap</span> with other countries' borders. Use <a href="http://geojson.io/#map=2/20.0/0.0"> Geojson editor </a> to draw borders. When updating coordinates, copy the brackets and coordinates after "coordinates:" and make sure the number of brackets in the beginning and at the end match. It is recommended to save coordinates as "GeoJSON" before copying the coordinates.</p>
        </div>
      </form>
      <div style="width: 100%; display: flex; justify-content: center; align-items: center; flex-direction: column;">
        <img src="edit-borders.gif" width ="800" height = "400" alt="Editing Border Example">
        <p>How to work with GeoJSON?</p>
      </div>

    <%if (data != undefined && data[0] != undefined){ %>
      <% data = data[0] %>
      <!-- <form class="form-horizontal" id ="updateData" method ="PUT" action ="/update" > -->
      <table class=""  id="databaseTable" value= <%= data._id %> >
        <thead>
          <tr style="border-top: 2px solid black; border-bottom: 2px solid black">
            <th scope="col" style="box-sizing: border-box; padding: 16px 24px"></th>
            <th scope="col" style="box-sizing: border-box; padding: 16px 24px; width: 100%">Content</th>
            <th scope="col" style="box-sizing: border-box; padding: 16px 24px">Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr value ="properties.name" style="border-bottom: 2px solid black">
            <th scope="row" style="box-sizing: border-box; padding: 16px 24px">Country</th>
            <td style="box-sizing: border-box; padding: 16px 24px;">
              <div id="name" class="row_data" edit_type="click" style="box-sizing: border-box; padding: 0; display: flex; flex-direction: row; width: 100%;">
                <%= data.properties.name[0] %>
              </div>
            </td>
            <td style="box-sizing: border-box; padding: 16px 24px;">
              <div style="display: flex; flex-direction: row; align-items: center; gap: 16px">
                <span class="btn-save" style="visibility: hidden"><button style="display: flex; flex-direction: row; justify-content: center; align-items: center; background-color: transparent; border: none; font-size: 20px; padding: 0; box-sizing: border-box; margin: 0"><i class="fa-regular fa-pen-to-square"></i></button></span>
                <span class="btn-cancel" style="visibility: hidden"><button style="display: flex; flex-direction: row; justify-content: center; align-items: center; background-color: transparent; border: none; font-size: 20px; padding: 0; box-sizing: border-box; margin: 0"><i class="fa-solid fa-xmark"></i></button></span>
              </div>
            </td>
          </tr>

          <tr value ="geometry.type" style="border-bottom: 2px solid black">
            <th scope="row" style="box-sizing: border-box; padding: 16px 24px">Geometry Type</th>
            <td style="box-sizing: border-box; padding: 16px 24px;">
              <div class="row_data" edit_type="click" style="box-sizing: border-box; padding: 0; display: flex; flex-direction: row; width: 100%;">
                <%= data.geometry.type %>
              </div>
            </td>
            <td style="box-sizing: border-box; padding: 16px 24px;">
              <div style="display: flex; flex-direction: row; align-items: center; gap: 16px">
                <span class="btn-save" style="visibility: hidden"><button style="display: flex; flex-direction: row; justify-content: center; align-items: center; background-color: transparent; border: none; font-size: 20px; padding: 0; box-sizing: border-box; margin: 0"><i class="fa-regular fa-pen-to-square"></i></button></span>
                <span class="btn-cancel" style="visibility: hidden"><button style="display: flex; flex-direction: row; justify-content: center; align-items: center; background-color: transparent; border: none; font-size: 20px; padding: 0; box-sizing: border-box; margin: 0"><i class="fa-solid fa-xmark"></i></button></span>
              </div>
            </td>
          </tr>

          <tr value="geometry.coordinates" style="border-bottom: 2px solid black">
            <th scope="row" style="box-sizing: border-box; padding: 16px 24px; display: flex; flex-direction: column; justify-content: flex-start;">
              Geometry Coordinates
            </th>
            <td style="width: 100%" style="box-sizing: border-box; padding: 16px 24px;">
              <div style="min-height: 40px; max-height: 240px; overflow: auto; box-sizing: border-box; padding: 16px 24px;">
                <span id="coordinatesData" style="display: none;"><%= JSON.stringify(data.geometry.coordinates)%> </span>
                <p id="coordinatesMessage">Coordinates are hidden. Click "Toggle" to view them.</p>
              </div>
            </td>
            <td style="box-sizing: border-box; padding: 32px 16px 24px 16px; display: flex; flex-direction: column; justify-content: flex-start;">
              <div style="display: flex; flex-direction: row; align-items: center; gap: 16px">
              <button  id="toggleCoordinates" style="display: flex; flex-direction: row; justify-content: center; align-items: center; background-color: transparent; border: none; font-size: 20px; padding: 0; box-sizing: border-box; margin: 0"><i class="fa fa-eye fa-lg"></i></i></button>
              </div>
            </td>
          </tr>

          <tr style="border-bottom: 2px solid black">
            <th scope="row" style="box-sizing: border-box; padding: 16px 24px; display: flex; flex-direction: column; justify-content: flex-start;">Geometry Border</th>
            <td style="box-sizing: border-box; padding: 16px 24px;">
              <div id="map">
              </div>
            </td>
          </tr>
          <tr style="border-bottom: 2px solid black">
            <th scope="row" style="box-sizing: border-box; padding: 16px 24px; display: flex; flex-direction: column; justify-content: flex-start;">Split Country</th>
            <td style="box-sizing: border-box; padding: 16px 24px;">
              <div style="display: flex; flex-direction: column; justify-content: flex-start; align-items: flex-start; gap: 16px; width: 100%; box-sizing: border-box;">
                <div style="display: flex; flex-direction: row; justify-content: center; align-items: center; gap: 16px; height: 36px; width: 100%">
                  <label style="margin: 0" for="splitCount">Number of split: </label>
                  <input style="flex: 1; height: 100%;" type="number" name="splitCount" id="splitCount" min="2" value="2">
                </div>
                <div id="mapsContainer" style="width: 100%"></div>
              </div>
            </td>
            <td style="box-sizing: border-box; padding: 28px 24px 16px 24px; display: flex; flex-direction: column; justify-content: flex-start;">
              <div style="display: flex; flex-direction: row; align-items: center; gap: 16px">
                <button id="splitButton" style="display: flex; flex-direction: row; justify-content: center; align-items: center; background-color: transparent; border: none; font-size: 20px; padding: 0; box-sizing: border-box; margin: 0"><i class="fa fa-scissors"></i></button>
                <button style="display: flex; flex-direction: row; justify-content: center; align-items: center; background-color: transparent; border: none; font-size: 20px; padding: 0; box-sizing: border-box; margin: 0" id="saveSplitButton"> <i class="fa fa-check fa-lg"></i></button>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    <%} else if(data != undefined && data[0] == undefined){%>
        <div class="row justify-content-center">
          Incorrect Country Name entered, please try again.
        </div>
    <% } %>
    </div>

    <script type="text/javascript" >
      $('li a').removeClass('active');
      $('a[href="/editBorders"]').addClass('active');

      var id = $("#databaseTable").attr('value');

      $(document).on('click', '.row_data', function(event)
      {
        event.preventDefault();

        if($(this).attr('edit_type') == 'button')
        {
          return false;
        }

        var tbl_row = $(this).closest('tr');

        tbl_row
          .find('.btn-save')
          .css({"visibility": "visible"});
        tbl_row
          .find('.btn-cancel')
          .css({"visibility": "visible"});
        tbl_row
          .find('.btn-delete')
          .css({"visibility": "visible"});
        tbl_row
          .find('.row_data')
          .attr("clicked", false);

        $(this).attr('original_entry', $(this).html());
        $(this).attr('clicked', true);

        // Make div editable
        $(this).closest('div').attr('contenteditable', 'true');
        
        // Add background css
        $(this).addClass('bg-warning').css('padding','5px');

        $(this).focus();
      });

      $(document).on('click', '.btn-cancel', function(event)
      {
        event.preventDefault();
        var tbl_row = $(this).closest('tr');
        
        // var row_id = tbl_row.attr('row_id');
        
        // Hide save and cancel buttons
        
        tbl_row
          .find('.btn-save')
          .css({"visibility": "hidden"});
        tbl_row
          .find('.btn-cancel')
          .css({"visibility": "hidden"});
        tbl_row
          .find('.btn-delete')
          .css({"visibility": "hidden"});
        tbl_row
          .find('.btn-add')
          .css({"visibility": "hidden"});

        // Make the whole row editable
        tbl_row
          .find('.row_data')
          .attr('edit_type', 'click')
          .removeClass('bg-warning')
          .css('padding','');

        tbl_row
          .find('.row_data')
          .each(function(index, val)
          {
            $(this).html( $(this).attr('original_entry') );
          });

        tbl_row
          .find('.input')
          .val("");
      });

      $(document).on('click', '.btn-delete', function(event)
      {
        event.preventDefault();
        var tbl_row = $(this).closest('tr');
        var field = tbl_row.attr('value');
        var dataToRemove = $(".row_data[clicked=true]").html().trim();

        // console.log(dataToRemove);

        // Hide save and cancel buttons
        tbl_row
          .find('.btn-save')
          .css({"visibility": "hidden"});
        tbl_row
          .find('.btn-cancel')
          .css({"visibility": "hidden"});
        tbl_row
          .find('.btn-add')
          .css({"visibility": "hidden"});
        tbl_row
          .find('.btn-delete')
          .css({"visibility": "hidden"});

        if (field == "altName")
        {
          field = "properties.name";
        }

        if (field =="altCapital")
        {
          field= "properties.capital";
        }

        // Make the whole row editable
        tbl_row.find('.row_data')
          .attr('edit_type', 'click')
          .removeClass('bg-warning')
          .css('padding','');

        $.ajax({
          url: '/deleteData',
          type: 'POST',
          contentType: 'application/json',
          data: JSON.stringify({
            id: id,
            field: field,
            value: dataToRemove
          }),
          dataType: 'json',
          success: function(data)
          {
            console.log("Success update request")
            location.reload();
          }
        });
      });

      // Make cancel and add button appear
      $(document).on('click', '.input', function(event)
      {
        event.preventDefault();

        var tbl_row = $(this).closest('tr');
        
        // Hide save and cancel buttons
        tbl_row
          .find('.btn-add')
          .css({"visibility": "visible"});
        tbl_row
        .find('.btn-cancel')
        .css({"visibility": "visible"});
      });

      // Add the data that was added
      $(document).on('click', '.btn-add', function(event)
      {
        event.preventDefault();

        var tbl_row = $(this).closest('tr');
        var field = tbl_row.attr('value');

        var dataToAdd = tbl_row.find(".input").val();

        // Hide save and cancel buttons
        tbl_row
          .find('.btn-save')
          .css({"visibility": "hidden"});
        tbl_row
          .find('.btn-cancel')
          .css({"visibility": "hidden"});

        if (field == "altName")
        {
          field = "properties.name";
        }

        if (field == "altCapital")
        {
          field= "properties.capital";
        }

        $.ajax({
          url: '/addData',
          type: 'POST',
          contentType: 'application/json',
          data: JSON.stringify({
            id: id,
            field: field,
            value: dataToAdd
          }),
          dataType: 'json',
          success: function(data)
          {
            location.reload();
          }
        });
      });

      $(document).on('focusout', '.row_data', function(event)
      {
        event.preventDefault();

        if($(this).attr('edit_type') == 'button')
        {
          return false;
        }

        // Add background CSS
        var row_div = $(this)
                        .removeClass('bg-warning')
                        .css('padding','')
      });

      // Send Update Request
      $(document).on('click', '.btn-save', function(event)
      {
        event.preventDefault();

        var tbl_row = $(this).closest('tr');
        // Field to update in a database
        var field = tbl_row.attr('value');

        // Formatting the data in an array form without empty strings.
        var newData = tbl_row.find('.row_data').text().trim().split('\n');
        newData = newData.map(s =>s.trim());
        newData = newData.filter(Boolean);
      
        // Hide save and cancel buttons
        tbl_row.find('.btn-save').css({"visibility": "hidden"});
        tbl_row.find('.btn-cancel').css({"visibility": "hidden"});
        tbl_row.find('.btn-delete').css({"visibility": "hidden"});
        
        // Can be capital or name depending on what field to update
        var name; 
        if (field == "altCapital")
        {
          name = $("#capital").html();
        }
        else if (field=="altName")
        {
          name = $('#name').html();
        }
        else if(field =="properties.name")
        {
          name = $('#name').html();
          var otherNames = $("#altName").find('.row_data').text().trim().split('\n');
          otherNames = otherNames.map(s=>s.trim()).filter(Boolean);
          newData = newData.concat(otherNames);
          console.log(newData);
        }
        else if(field =="properties.capital")
        {
          name = $("#capital").html();
          var otherCaps = $("#altCapital").find('.row_data').text().trim().split('\n');
          otherCaps = otherNames.map(s=>s.trim()).filter(Boolean);
          newData = newData.concat(otherCaps);
          console.log(newData);
        }

        $.ajax({
          url: '/update',
          type: 'PUT',

          contentType: 'application/json',
          data: JSON.stringify({
            id: id,
            name: name,
            field: field,
            value: newData
          }),
          dataType: 'json',
          success: function(data)
          {
            console.log(JSON.stringify({
              id: id,
              name: name,
              field: field,
              value: newData
            }));
            console.log(data);
            console.log("Success update request");
          }
        });
      });
    </script>

    <script type="text/javascript">
      /* Features of the country - GeoJSON */
      var countryFeatures = <%- JSON.stringify(data) %>;
      
      /* GeoJSON of the country */
      var countryGeoJSON = {
        "type": "FeatureCollection",
        "features": [countryFeatures]
      };
      
      /* Adding GeoJSON of the country to the map */
      var vectorSource = new ol.source.Vector({
        features: new ol.format.GeoJSON().readFeatures(countryGeoJSON, {
          dataProjection: 'EPSG:4326',
          featureProjection: 'EPSG:3857'
        })
      });

      /* Creating a vector layer for displaying country boundaries on the map. */
      var vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: new ol.style.Style({
          fill: new ol.style.Fill({
            color: 'rgba(255, 255, 255, 0.2)'
          }),
          stroke: new ol.style.Stroke({
            color: '#ffcc33',
            width: 2
          }),
          image: new ol.style.Circle({
            radius: 7,
            fill: new ol.style.Fill({
              color: '#ffcc33',
            })
          })
        }),
      });

      /** Declaration of variables to hold information about the country continent, map center, zoom level. */
      var center, zoom, minzoom;

      /* For setting zoom and center of the map of each continent */
      var continent = countryFeatures.properties.continent;

      switch (continent) {
        case "africa":
          center = [24, -1];
          zoom = 1.75;
          minzoon = 2;
          break;
      
        case "asia":
          center = [120, 36];
          zoom = 0.75;
          minzoom = 1.3;
          break;
      
        case "europe":
          center = [9, 28];
          zoom = 0.85;
          minzoom = 1.3;
          break;
      
        case "south-america":
          center = [-58, -18];
          zoom = 1;
          minzoom = 1.3;
          break;
      
        case "north-america":
          zoom = 0.75;
          center = [-100, 64];
          minzoom = 1.3;
          break;
      
        case "oceania":
          zoom = 2.25;
          center = [172, -24];
          minzoom = 2;
          break;
      }

      /* Creating the map with the defined center, zoom, and layers */
      var map = new ol.Map({
        target: 'map',
        layers: [
          new ol.layer.Tile({
            source: new ol.source.OSM(),
          }),
          vectorLayer
        ],
        view: new ol.View({
          center: ol.proj.fromLonLat(center), 
          zoom: zoom, 
          minzoom: minzoom,
          maxResolution: 72000
        })
      });

      var modify = new ol.interaction.Modify({
        source: vectorSource,
        style: new ol.style.Style({
          fill: new ol.style.Fill({
            color: "rgba(255, 255, 255, 0.2)"
          }),
          stroke: new ol.style.Stroke({
            color: "#ffcc33",
            width: 2
          }),
          image: new ol.style.Circle({
            radius: 7,
            fill: new ol.style.Fill({
              color: "#ffcc33",
            })
          })
        }),
        deleteCondition: function(event) 
        {
          return ol.events.condition.shiftKeyOnly(event) &&
                 ol.events.condition.singleClick(event);
        }
      });

      map.addInteraction(modify);

      modify.on('modifyend', function(event) {
        var modifiedFeature = event.features.getArray()[0];
        var modifiedCoordinates = modifiedFeature.getGeometry().getCoordinates();
        
        // Transform the coordinates from EPSG:3857 to EPSG:4326
        var transformedCoordinates = modifiedCoordinates.map(function(polygon) {
          return polygon.map(function(ring) {
            return ring.map(function(coordinate) {
              return ol.proj.transform(coordinate, 'EPSG:3857', 'EPSG:4326');
            });
          });
        });

        var newData = JSON.stringify(transformedCoordinates).trim().split('\n');
        newData = newData.map(s =>s.trim());
        newData = newData.filter(Boolean);
        
        $.ajax({
          url: '/update',
          type: 'PUT',
          contentType: 'application/json',
          data: JSON.stringify({
            id: countryFeatures._id,
            field: "geometry.coordinates",
            value: newData
          }),
          dataType: 'json',
          success: function(data) {
            console.log('Geometry coordinates updated successfully:', data);

            // Update the table with the new coordinates
            $('#databaseTable').find('tr[value="geometry.coordinates"] .row_data').html(JSON.stringify(transformedCoordinates));
          },
          error: function(xhr, status, error) {
            console.error('Failed to update geometry coordinates:', error);
          }
        }); 
      });
    </script>
    <script type="text/javascript">
      function toggleCoordinatesVisibility() {
        var coordinatesDiv = document.getElementById('coordinatesData');
        var coordinatesMessage = document.getElementById('coordinatesMessage');
        if (coordinatesDiv.style.display === 'none') {
          coordinatesDiv.style.display = 'block';
          coordinatesMessage.style.display = 'none';
        } else {
          coordinatesDiv.style.display = 'none';
          coordinatesMessage.style.display = 'block';
        }
      }

      // Attach click event to the button
      document.getElementById('toggleCoordinates').addEventListener('click', toggleCoordinatesVisibility);
    </script>
    <script>
      var splitCountriesData = [];
      /* Features of the country - GeoJSON */
      var countryFeatures = <%- JSON.stringify(data) %>;
      var orgCountryName = countryFeatures.properties.name[0];
      /* GeoJSON of the country */
      var countryGeoJSON = {
        "type": "FeatureCollection",
        "features": [countryFeatures]
      };
      document.getElementById('splitButton').addEventListener('click', function() {
          var splitCount = document.getElementById('splitCount').value;
          var mapsContainer = document.getElementById('mapsContainer');
          mapsContainer.innerHTML = '';
          for (var i = 0; i < splitCount; i++) {
              var mapDiv = document.createElement('div');
              mapDiv.id = 'map-' + (i + 1);
              mapDiv.className = 'map-container';
              mapsContainer.appendChild(mapDiv);

              // Create input field for entering name
              var mapNameDiv = document.createElement('div');
              mapNameDiv.className = 'map-name';
              var nameLabel = document.createElement('label');
              nameLabel.for = 'name-' + (i + 1);
              nameLabel.textContent = 'Name for country ' + (i + 1) + ':';
              var nameInput = document.createElement('input');
              nameInput.type = 'text';
              nameInput.id = 'name-' + (i + 1);
              nameInput.value = orgCountryName + " " + (i + 1);
              nameInput.className = 'map-name-input';
              nameInput.disabled = true;
              nameInput.required = true;
              mapNameDiv.appendChild(nameLabel);
              mapNameDiv.appendChild(nameInput);
              mapDiv.appendChild(mapNameDiv);
  
            var initCountryData = {
              "type": "Feature",
              "properties": {
                "name": [orgCountryName + " " + (i+1)],
                "id": orgCountryName + " " + (i + 1),
                "capital": [],
                "misspell_name": [],
                "misspell_capital": [],
                "continent": countryFeatures.properties.continent, 
              },
              "geometry": {
                "type": countryFeatures.geometry.type,
                "coordinates": countryFeatures.geometry.coordinates,
              }
            }
  
            splitCountriesData.push(initCountryData);
            console.log(splitCountriesData);
          }


          for (let i = 1; i <= splitCount; i++) {
            let mapTarget = 'map-' + i;
            console.log('Initializing map for:', mapTarget); // Debugging line

            /* Adding GeoJSON of the country to the map */
            var vectorSource = new ol.source.Vector({
              features: new ol.format.GeoJSON().readFeatures(countryGeoJSON, {
                dataProjection: 'EPSG:4326',
                featureProjection: 'EPSG:3857'
              })
            });

            /* Creating a vector layer for displaying country boundaries on the map. */
            var vectorLayer = new ol.layer.Vector({
              source: vectorSource,
              style: new ol.style.Style({
                fill: new ol.style.Fill({
                  color: 'rgba(255, 255, 255, 0.2)'
                }),
                stroke: new ol.style.Stroke({
                  color: '#ffcc33',
                  width: 2
                }),
                image: new ol.style.Circle({
                  radius: 7,
                  fill: new ol.style.Fill({
                    color: '#ffcc33',
                  })
                })
              }),
            });

            /** Declaration of variables to hold information about the country continent, map center, zoom level. */
            var center, zoom, minzoom;
      
            /* For setting zoom and center of the map of each continent */
            var continent = countryFeatures.properties.continent;
      
            switch (continent) {
              case "africa":
                center = [24, -1];
                zoom = 1.75;
                minzoon = 2;
                break;
            
              case "asia":
                center = [120, 36];
                zoom = 0.75;
                minzoom = 1.3;
                break;
            
              case "europe":
                center = [9, 28];
                zoom = 0.85;
                minzoom = 1.3;
                break;
            
              case "south-america":
                center = [-58, -18];
                zoom = 1;
                minzoom = 1.3;
                break;
            
              case "north-america":
                zoom = 0.75;
                center = [-100, 64];
                minzoom = 1.3;
                break;
            
              case "oceania":
                zoom = 2.25;
                center = [172, -24];
                minzoom = 2;
                break;
            }

            /* Creating the map with the defined center, zoom, and layers */
            var map = new ol.Map({
              target: 'map-' + i,
              layers: [
                new ol.layer.Tile({
                  source: new ol.source.OSM(),
                }),
                vectorLayer
              ],
              view: new ol.View({
                center: ol.proj.fromLonLat(center), 
                zoom: zoom, 
                minzoom: minzoom,
                maxResolution: 72000
              })
            });
      
            var modify = new ol.interaction.Modify({
              source: vectorSource,
              style: new ol.style.Style({
                fill: new ol.style.Fill({
                  color: "rgba(255, 255, 255, 0.2)"
                }),
                stroke: new ol.style.Stroke({
                  color: "#ffcc33",
                  width: 2
                }),
                image: new ol.style.Circle({
                  radius: 7,
                  fill: new ol.style.Fill({
                    color: "#ffcc33",
                  })
                })
              }),
              deleteCondition: function(event) 
              {
                return ol.events.condition.shiftKeyOnly(event) &&
                      ol.events.condition.singleClick(event);
              }
            });
      
            map.addInteraction(modify);

            modify.on('modifyend', function(event) {
              var modifiedFeature = event.features.getArray()[0];
              var modifiedCoordinates = modifiedFeature.getGeometry().getCoordinates();
              
              // Transform the coordinates from EPSG:3857 to EPSG:4326
              var transformedCoordinates = modifiedCoordinates.map(function(polygon) {
                return polygon.map(function(ring) {
                  return ring.map(function(coordinate) {
                    return ol.proj.transform(coordinate, 'EPSG:3857', 'EPSG:4326');
                  });
                });
              });
      
              var newData = JSON.stringify(transformedCoordinates).trim().split('\n');
              newData = newData.map(s =>s.trim());
              newData = newData.filter(Boolean);
              
              console.log(`map-${i}: `,newData);
              var countryName = document.getElementById('name-' + i).value;
              var countryData = {
                "type": "Feature",
                "properties": {
                  "name": [countryName],
                  "id": countryName,
                  "capital": [],
                  "misspell_name": [],
                  "misspell_capital": [],
                  "continent": continent, 
                },
                "geometry": {
                  "type": countryFeatures.geometry.type,
                  "coordinates": newData,
                }
              }

              // Check if the country already exists in splitCountriesData
              var countryIndex = splitCountriesData.findIndex(function(country) {
                  return country.properties.id === countryData.properties.id;
              });
              console.log(countryIndex);
          
              // If the country exists, update its data; otherwise, push it into splitCountriesData
              if (countryIndex !== -1) {
                  splitCountriesData[countryIndex] = countryData;
              } else {
                  splitCountriesData.push(countryData);
              }
            });
          }
      });

      document.getElementById('saveSplitButton').addEventListener('click', function() {
          var countryName = document.getElementById('countryName').value;
          console.log(splitCountriesData);
          $.ajax({
              url: '/saveSplitCountries',
              type: 'POST',
              contentType: 'application/json',
              data: JSON.stringify({
                  originalCountryId: countryFeatures.properties.id,
                  splitCountries: splitCountriesData
              }),
              dataType: 'json',
              success: function(data) {
                  // Handle success response
                  console.log('Split countries saved successfully:', data);
                  alert('Split countries saved successfully.');
                  location.reload();
              },
              error: function(xhr, status, error) {
                  // Handle error response
                  console.error('Failed to save split countries:', error);
                  alert('Failed to save split countries. Please try again.');
              }
          });
      });
    </script>
  </body>
</html>
